{
  "author": "",
  "category": "Third-party",
  "extensionNamespace": "",
  "fullName": "1SatOrdinals and BSV",
  "gdevelopVersion": "",
  "helpPath": "",
  "iconUrl": "",
  "name": "OneSatOrdinalsBSV",
  "previewIconUrl": "",
  "shortDescription": "Adds easy management of 1SatOrdinals and BSV in your GDevelop game",
  "version": "1.0.0-dev",
  "description": "",
  "tags": [
    "ordinals",
    "nfts",
    "nft",
    "ordinal",
    "token",
    "bsv",
    "bitcoin sv",
    "bitcoin",
    "tokens",
    "bsv20",
    "bsv21"
  ],
  "authorIds": [
    "Vu2ZkG9HyRchkjTdpXr4E3Fux7Q2"
  ],
  "dependencies": [],
  "sourceFiles": [
    {
      "resourceName": "1satordinalsbsv.js",
      "includePosition": "last"
    }
  ],
  "globalVariables": [],
  "sceneVariables": [],
  "eventsFunctions": [
    {
      "async": true,
      "description": "Checks if the specified address has a specific ordinal",
      "fullName": "Address has ordinal",
      "functionType": "Action",
      "name": "Address_Ordinal_Check_Action",
      "sentence": "Check if _PARAM1_ has _PARAM2_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "const address = eventsFunctionContext.getArgument('address');",
            "const origin = eventsFunctionContext.getArgument('origin');",
            "/** @type {gdjs.Variable} */",
            "const variable = eventsFunctionContext.getArgument('returnvar');",
            "",
            "return new gdjs.PromiseTask(window.ord.checkIfUserHasOrdinal(address, origin).then((result) => {",
            "    variable.setValue(result);",
            "}));"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": true
        }
      ],
      "parameters": [
        {
          "description": "Address",
          "name": "address",
          "type": "string"
        },
        {
          "description": "Ordinal origin",
          "name": "origin",
          "type": "string"
        },
        {
          "description": "Variable to store result in",
          "name": "returnvar",
          "type": "variable"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Generates a private key in the Wallet Import Format",
      "fullName": "Generate WIF",
      "functionType": "StringExpression",
      "name": "Generate_WIF",
      "sentence": "Generate a Private Key in WIF Format",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "eventsFunctionContext.returnValue = window.ord.generatePrivateKey();",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "expressionType": {
        "type": "string"
      },
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Returns the Public Key related to the Private Key in WIF passed",
      "fullName": "Convert Private Key in WIF to Public Key",
      "functionType": "StringExpression",
      "name": "PrivateKey_To_PubKey",
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "const privKey = eventsFunctionContext.getArgument('PrivateKey');",
            "",
            "eventsFunctionContext.returnValue = window.ord.privKeyToPubKey(privKey);"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "expressionType": {
        "type": "string"
      },
      "parameters": [
        {
          "description": "Private Key in WIF",
          "name": "PrivateKey",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Returns the Address related to the Private Key in WIF passed",
      "fullName": "Convert Private Key in WIF to Address",
      "functionType": "StringExpression",
      "name": "PrivateKey_To_Address",
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "const privKey = eventsFunctionContext.getArgument('PrivateKey');",
            "",
            "eventsFunctionContext.returnValue = window.ord.privKeyToAddress(privKey);"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "expressionType": {
        "type": "string"
      },
      "parameters": [
        {
          "description": "Private Key in WIF",
          "name": "PrivateKey",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Converts a Public Key to an Address",
      "fullName": "Convert Public Key to Address",
      "functionType": "StringExpression",
      "name": "PubKey_To_Address",
      "sentence": "",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "const pubkey = eventsFunctionContext.getArgument('PubKey');\r",
            "\r",
            "eventsFunctionContext.returnValue = window.ord.pubKeyToAddress(pubkey);"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "expressionType": {
        "type": "string"
      },
      "parameters": [
        {
          "description": "Public Key",
          "name": "PubKey",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "async": true,
      "description": "Gets the balance of the specified BSV address in sats",
      "fullName": "Get Balance of Specified Address in Sats",
      "functionType": "Action",
      "name": "Get_Balance_Action",
      "sentence": "Get Balance of _PARAM1_ and return to _PARAM2_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "/** @type {gdjs.Variable} */",
            "const variable = eventsFunctionContext.getArgument('ReturnTo');",
            "const address = eventsFunctionContext.getArgument('Address');",
            "",
            "return new gdjs.PromiseTask(window.ord.getBalanceInSats(address).then((balance) => {",
            "    variable.setNumber(balance);",
            "}));"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "description": "Address",
          "name": "Address",
          "type": "string"
        },
        {
          "description": "Return Var",
          "name": "ReturnTo",
          "type": "variable"
        }
      ],
      "objectGroups": []
    },
    {
      "async": true,
      "description": "Allows you to get the balance of any BSV20/21 token that a user holds",
      "fullName": "Get balance of BSV20/21 token",
      "functionType": "Action",
      "name": "Get_Token_Balance_Action",
      "sentence": "Get balance of token _PARAM1_ held by _PARAM2_ which is a _PARAM3_ and return result to _PARAM4_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "const tokenId = eventsFunctionContext.getArgument('TokenID');",
            "const address = eventsFunctionContext.getArgument('Address');",
            "const tokenType = eventsFunctionContext.getArgument('TokenType');",
            "/** @type {gdjs.Variable} */",
            "const returnVar = eventsFunctionContext.getArgument('ReturnTo');",
            "",
            "return new gdjs.PromiseTask(window.ord.getTokenBalance(address, tokenId, tokenType).then((balance) => {",
            "    returnVar.setNumber(balance);",
            "}));"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "description": "Token Origin or Ticker (for BSV20)",
          "name": "TokenID",
          "type": "string"
        },
        {
          "description": "Address to check balance of",
          "name": "Address",
          "type": "string"
        },
        {
          "description": "The type of token it is",
          "name": "TokenType",
          "supplementaryInformation": "[\"BSV20\",\"BSV21\"]",
          "type": "stringWithSelector"
        },
        {
          "description": "Return Variable",
          "name": "ReturnTo",
          "type": "variable"
        }
      ],
      "objectGroups": []
    },
    {
      "async": true,
      "description": "Send BSV to the specified address",
      "fullName": "Send BSV",
      "functionType": "Action",
      "name": "Send_Bsv_Action",
      "sentence": "Send _PARAM1_ sats to _PARAM2_ from Private Key _PARAM3_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "const sats = eventsFunctionContext.getArgument('Sats');",
            "const address = eventsFunctionContext.getArgument('Address');",
            "const privKey = eventsFunctionContext.getArgument('PrivateKey');",
            "",
            "return new gdjs.PromiseTask(window.ord.sendBsv(sats, privKey, address));"
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "description": "Number of sats to send. 1 sat = 10^-8 of a BSV",
          "name": "Sats",
          "type": "expression"
        },
        {
          "description": "Address to send to",
          "name": "Address",
          "type": "string"
        },
        {
          "description": "Private Key in WIF format to send from. Change will also be sent here",
          "name": "PrivateKey",
          "type": "string"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": [],
  "eventsBasedObjects": []
}